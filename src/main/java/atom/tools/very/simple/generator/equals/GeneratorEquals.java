package atom.tools.very.simple.generator.equals;


import java.io.File;

import java.util.ArrayList;
import java.util.List;

import javax.lang.model.element.Modifier;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;

import atom.tools.very.simple.generator.mapper.JavaPoetWriter;
import atom.tools.very.simple.mapper.p1.Info;

public class GeneratorEquals {

	private GeneratorClassEquals  generatorClazz;
	private File dirOutput = new File("GENERATED_COMPARATOR");
	private JavaPoetWriter javaPoetWritter;
	private static String packageName = "atom.generated.factory";
	private List<GeneratorClassEquals> listClassFactory = new ArrayList();
	
	public GeneratorEquals(Class<Info> class1) throws ClassNotFoundException {
		
		dirOutput.mkdirs();
		this.generatorClazz = new GeneratorClassEquals(class1);
		processClass(this.generatorClazz);

		javaPoetWritter = new JavaPoetWriter(dirOutput);
		javaPoetWritter.write(getJavaFileGenerator());
		System.err.println("ObjectFacrory Done  dirOutput exists  : " + dirOutput.exists() + " | path  : " + dirOutput.getAbsolutePath());
	}

	private void processClass(final GeneratorClassEquals c) throws ClassNotFoundException {

		listClassFactory.add(c);
		c.process();
		for (final Class cl : c.getListClass()) {
			if (!isProcessed(cl)) {
				processClass(new GeneratorClassEquals(cl));
			}
		}
	}

	private boolean isProcessed(Class  cp) {
		for (GeneratorClassEquals c : this.listClassFactory) {
			if (c.getClazz().equals(cp)) {
				return true;
			}
		}
		return false;
	}

	public JavaFile getJavaFileGenerator() {

		final TypeSpec.Builder classBuilder = TypeSpec.classBuilder(getClassFactoryName()).addModifiers(Modifier.PUBLIC);

		String comment = "Cette Class propose un factory utile pour les tests \n";
		comment += "Class : \t" + generatorClazz.getClazz().getName() + "\n";
	

	  
		comment += "\n\n ";
		classBuilder.addJavadoc(comment);
		classBuilder.addMethod(mainFactoryMethod());
	
		
		for (final GeneratorClassEquals cp : listClassFactory) {
			classBuilder.addMethod(cp.getMethodCreate());		
		}
		classBuilder.addMethod(equalsMethod());
		

		final TypeSpec customClassMapper = classBuilder.build();
		final JavaFile.Builder javaFileBuilder = JavaFile.builder(packageName, customClassMapper).indent("    ");

		javaFileBuilder.addFileComment("Generated by " + this.getClass().getName());
		final JavaFile javaFile = javaFileBuilder.build();
		return javaFile;
	}
	
	private String getClassFactoryName() {
	
			return "Equals_" + generatorClazz.getClazz().getSimpleName();
	}
	
	private MethodSpec mainFactoryMethod( ) {
		final MethodSpec.Builder methodBuilder = MethodSpec.methodBuilder("equals").
			
				returns(boolean.class).
				addModifiers(Modifier.PUBLIC).
				addModifiers(Modifier.STATIC).
				addParameter(generatorClazz.getClazz(),"o1").
				addParameter(generatorClazz.getClazz(),"o2");
		methodBuilder.addJavadoc("\nSeule methode public de la classe\n");
		
		methodBuilder.addStatement("return " + generatorClazz.getMethodName() + "( o1 , o2)");
		return methodBuilder.build();
	}
	
	private MethodSpec equalsMethod( ) {
		final MethodSpec.Builder methodBuilder = MethodSpec.methodBuilder("equals_Object").
			
				returns(boolean.class).
				addModifiers(Modifier.PROTECTED).
				addModifiers(Modifier.STATIC).
				addParameter(Object.class,"o1").
				addParameter(Object.class,"o2");
		methodBuilder.addJavadoc("\nmethode generique\n");
		methodBuilder.addStatement("//ZEE   " );
		methodBuilder.beginControlFlow("if ((o1  == null) && (o2  ==null))");		
		methodBuilder.addStatement("return true" );
		methodBuilder.endControlFlow();
		methodBuilder.beginControlFlow("else if (o1 == null) ");	
		methodBuilder.addStatement("return false" );
		methodBuilder.endControlFlow();
		methodBuilder.beginControlFlow("else if (o2 == null) ");	
		methodBuilder.addStatement("return false" );
		methodBuilder.endControlFlow();
		
		methodBuilder.addStatement("return o1.equals(o2)" );
	
		return methodBuilder.build();
	}


}
