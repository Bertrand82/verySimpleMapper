// Generated by atom.tools.very.simple.generator.mapper.GeneratorMapper
package atom.generated.mapper;

import atom.tools.very.simple.mapper.p2.Adress;
import atom.tools.very.simple.mapper.p2.EnumPays;
import atom.tools.very.simple.mapper.p2.Info;
import atom.tools.very.simple.mapper.p2.Voiture;
import java.util.ArrayList;
import java.util.List;

/**
 * Cette Class permet de de fiare du mappage entre les 2 classes suivantes 
 * In : 	atom.tools.very.simple.mapper.p1.Info
 * Out: 	atom.tools.very.simple.mapper.p2.Info
 *
 *  Failure:  A2 	| class :  Info 	| fieldOut String  	aaaa   	| fieldIn  Missing  
 *  Failure:  A3 	| class :  Info 	| fieldOut List    	ls4    	| fieldIn  Missing  
 *  Failure:  A2 	| class :  Info 	| fieldOut String  	aazzzzzz 	| fieldIn  Missing  
 *  Failure:  A1 	| class :  Info 	| fieldOut boolean  	c      	| fieldIn boolean  	c     
 *  Failure:  A3 	| class :  Info 	| fieldOut List    	ls3    	| fieldIn  Missing  
 *
 *   */
public class Mapper_Info {
    public static Info map(atom.tools.very.simple.mapper.p1.Info in) {
        return map_Info(in);
    }

    public static atom.tools.very.simple.mapper.p1.Info map(Info in) {
        return map_Info(in);
    }

    protected static Info map_Info(atom.tools.very.simple.mapper.p1.Info in) {
        Info out =  new Info() ;
        //  String a
        out.setA(in.getA());
        // PP1 Primitive  java.lang.Integer   b
        out.setB(in.getB());
        // PP1 Primitive  boolean   c
        out.setC(in.isC());
        // FF1  adress  Adress
        out.setAdress(map_Adress( in.getAdress()));
        // LLA1  voitures  list class atom.tools.very.simple.mapper.p2.Voiture
        List <Voiture> ls_voitures = new ArrayList<Voiture>();
        if(in.getVoitures() != null) {
            for(atom.tools.very.simple.mapper.p1.Voiture o : in.getVoitures()) {
                ls_voitures.add(map_Voiture( o ));
            }
        }
        // //LS1  ls  list  Stringclass java.lang.String 
        List <String>ls_ls = new ArrayList<String>();
        for(String s : in.getLs()) {
            ls_ls.add(s);
        }
        out.setLs(ls_ls);
        // //LS1  ls2  list  Stringclass java.lang.String 
        List <String>ls_ls2 = new ArrayList<String>();
        for(String s : in.getLs2()) {
            ls_ls2.add(s);
        }
        out.setLs2(ls_ls2);
        // //LENUM  pays No Implemented 
        return out;
    }

    protected static atom.tools.very.simple.mapper.p1.Info map_Info(Info in) {
        atom.tools.very.simple.mapper.p1.Info out =  new atom.tools.very.simple.mapper.p1.Info() ;
        //  String a
        out.setA(in.getA());
        // PP1 Primitive  int   b
        out.setB(in.getB());
        // FF1  adress  Adress
        out.setAdress(map_Adress( in.getAdress()));
        // LLA1  voitures  list class atom.tools.very.simple.mapper.p1.Voiture
        List <atom.tools.very.simple.mapper.p1.Voiture> ls_voitures = new ArrayList<atom.tools.very.simple.mapper.p1.Voiture>();
        if(in.getVoitures() != null) {
            for(Voiture o : in.getVoitures()) {
                ls_voitures.add(map_Voiture( o ));
            }
        }
        // //LS1  ls  list  Stringclass java.lang.String 
        List <String>ls_ls = new ArrayList<String>();
        for(String s : in.getLs()) {
            ls_ls.add(s);
        }
        out.setLs(ls_ls);
        // //LS1  ls2  list  Stringclass java.lang.String 
        List <String>ls_ls2 = new ArrayList<String>();
        for(String s : in.getLs2()) {
            ls_ls2.add(s);
        }
        out.setLs2(ls_ls2);
        // //LENUM  pays No Implemented 
        return out;
    }

    protected static Adress map_Adress(atom.tools.very.simple.mapper.p1.Adress in) {
        Adress out =  new Adress() ;
        //  String rue
        out.setRue(in.getRue());
        //  String ville
        out.setVille(in.getVille());
        // PP1 Primitive  int   departement
        out.setDepartement(in.getDepartement());
        return out;
    }

    protected static atom.tools.very.simple.mapper.p1.Adress map_Adress(Adress in) {
        atom.tools.very.simple.mapper.p1.Adress out =  new atom.tools.very.simple.mapper.p1.Adress() ;
        //  String rue
        out.setRue(in.getRue());
        //  String ville
        out.setVille(in.getVille());
        // PP1 Primitive  int   departement
        out.setDepartement(in.getDepartement());
        return out;
    }

    protected static EnumPays map_EnumPays(atom.tools.very.simple.mapper.p1.EnumPays in) {
        EnumPays out =  null ;
        for(EnumPays   p :EnumPays.values()) {
            if (p.name().equals(""+in)) {
                 out = p;
            }
        }
        return out;
    }

    protected static atom.tools.very.simple.mapper.p1.EnumPays map_EnumPays(EnumPays in) {
        atom.tools.very.simple.mapper.p1.EnumPays out =  null ;
        for(atom.tools.very.simple.mapper.p1.EnumPays   p :atom.tools.very.simple.mapper.p1.EnumPays.values()) {
            if (p.name().equals(""+in)) {
                 out = p;
            }
        }
        return out;
    }

    protected static Voiture map_Voiture(atom.tools.very.simple.mapper.p1.Voiture in) {
        Voiture out =  new Voiture() ;
        //  String nom
        out.setNom(in.getNom());
        return out;
    }

    protected static atom.tools.very.simple.mapper.p1.Voiture map_Voiture(Voiture in) {
        atom.tools.very.simple.mapper.p1.Voiture out =  new atom.tools.very.simple.mapper.p1.Voiture() ;
        //  String nom
        out.setNom(in.getNom());
        return out;
    }
}
