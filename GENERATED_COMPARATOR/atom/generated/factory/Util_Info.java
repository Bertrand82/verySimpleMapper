// Generated by atom.tools.very.simple.generator.equals.GeneratorEquals
package atom.generated.factory;

import atom.tools.very.simple.mapper.p1.Adress;
import atom.tools.very.simple.mapper.p1.EnumPays;
import atom.tools.very.simple.mapper.p1.Info;
import atom.tools.very.simple.mapper.p1.Voiture;
import java.lang.Object;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;

/**
 * Cette Class propose un factory utile pour les tests 
 * Class : 	atom.tools.very.simple.mapper.p1.Info
 *
 *
 *  Cette Class propose un factory utile pour les tests 
 * Class : 	atom.tools.very.simple.mapper.p1.Info
 *
 *
 *  Cette Class propose un factory utile pour les tests 
 * Class : 	atom.tools.very.simple.mapper.p1.Info
 *
 *
 *   */
public class Util_Info {
    /**
     *
     * Seule methode public de la classe
     */
    public static String toString(Info o) {
        return toString_Info(o);
    }

    protected static String toString_Info(Info o) {
        int i=0;
        String s =  "{";
         s +="\"a\" :   \"" + o.getA()+"\" ,\n";
         s +="\"aazzzzzz\" :   \"" + o.getAazzzzzz()+"\" ,\n";
         s += "\"b\" : " + o.getB()+",\n";
         s +="\"adress\" :   " +toString_Adress (o.getAdress())+",\n";
        i=0;
         s +="\"ls\" : [  ";
        if(  o.getLs()== null) {
             s += "\n";
        } else {
            for( String x : o.getLs()) {
                if( i > 0) {
                    s +=",\n" ;
                }
                i++;
                 s +=" \""+x +"\"";
            }
        }
         s +="],\n  ";
        i=0;
         s +="\"ls2\" : [  ";
        if(  o.getLs2()== null) {
             s += "\n";
        } else {
            for( String x : o.getLs2()) {
                if( i > 0) {
                    s +=",\n" ;
                }
                i++;
                 s +=" \""+x +"\"";
            }
        }
         s +="],\n  ";
        i=0;
         s +="\"ls3\" : [  ";
        if(  o.getLs3()== null) {
             s += "\n";
        } else {
            for( String x : o.getLs3()) {
                if( i > 0) {
                    s +=",\n" ;
                }
                i++;
                 s +=" \""+x +"\"";
            }
        }
         s +="],\n  ";
        i=0;
         s +="\"voitures\" : [  ";
        if(  o.getVoitures()== null) {
             s += "\n";
        } else {
            for( Voiture x : o.getVoitures()) {
                if( i > 0) {
                    s +=",\n" ;
                }
                i++;
                s += toString_Voiture( x)+"\"";
            }
        }
         s +="],\n  ";
         s += "\"pays\" :  \"" + o.getPays()+"\"  \n";
        s +=  "}";
        return s;
    }

    protected static String toString_Adress(Adress o) {
        int i=0;
        String s =  "{";
         s +="\"rue\" :   \"" + o.getRue()+"\" ,\n";
         s +="\"ville\" :   \"" + o.getVille()+"\" ,\n";
         s += "\"departement\" : " + o.getDepartement()+" \n";
        s +=  "}";
        return s;
    }

    protected static String toString_String(String o) {
        int i=0;
        String s =  "{";
        s +=  "}";
        return s;
    }

    protected static String toString_Voiture(Voiture o) {
        int i=0;
        String s =  "{";
         s +="\"nom\" :   \"" + o.getNom()+"\"  \n";
        s +=  "}";
        return s;
    }

    /**
     *
     * Rajoute virgule
     */
    private static String virg(int i, int j) {
        if (i <j) {
            return ",";
        } else {
            return "aaaaaaaaaaaaaaaaaa,bbbbbbbbb";
        }
    }

    /**
     *
     * Seule methode public de la classe
     */
    public static Info createNewInstanceRandom() {
        return create_Info();
    }

    protected static Info create_Info() {
        Info out =  new Info ();
        //Nombre de  String :  2;
        //SS  String a;
        out.setA("rsoifbfkcp");
        //SS  String aazzzzzz;
        out.setAazzzzzz("zxccyzlzdk");
        //Nombre de  native :  1;
        //S3   int   b;
        out.setB(-1085546962);
        //Nombre de  enum :  1;
        //S4   class atom.tools.very.simple.mapper.p1.EnumPays   pays;
        out.setPays(create_EnumPays());
        // Nombre d'objet :  1;
        //S5   class atom.tools.very.simple.mapper.p1.Adress   adress;
        out.setAdress(create_Adress());
        //Nombre de  List<String> :  3;
        //S8   interface java.util.List   ls;
        out.setLs(new ArrayList<String>());
        out.getLs().add("kdmvoxjqzy");
        out.getLs().add("wwgvemjrrm");
        //S8   interface java.util.List   ls2;
        out.setLs2(new ArrayList<String>());
        out.getLs2().add("elzgcaalru");
        out.getLs2().add("axtgmhygfs");
        //S8   interface java.util.List   ls3;
        out.setLs3(new ArrayList<String>());
        out.getLs3().add("rqqucnpxwr");
        out.getLs3().add("ahzffvohkh");
        //Nombre de  list :  1;
        //S8   interface java.util.List   voitures;
        out.setVoitures(new ArrayList<Voiture>());
        out.getVoitures().add(create_Voiture());
        out.getVoitures().add(create_Voiture());
        return out;
    }

    protected static Adress create_Adress() {
        Adress out =  new Adress ();
        //Nombre de  String :  2;
        //SS  String rue;
        out.setRue("jmegbuesqz");
        //SS  String ville;
        out.setVille("vxhalqlaku");
        //Nombre de  native :  1;
        //S3   int   departement;
        out.setDepartement(-624006231);
        //Nombre de  enum :  0;
        // Nombre d'objet :  0;
        //Nombre de  List<String> :  0;
        //Nombre de  list :  0;
        return out;
    }

    protected static Voiture create_Voiture() {
        Voiture out =  new Voiture ();
        //Nombre de  String :  1;
        //SS  String nom;
        out.setNom("osrspjyhwg");
        //Nombre de  native :  0;
        //Nombre de  enum :  0;
        // Nombre d'objet :  0;
        //Nombre de  List<String> :  0;
        //Nombre de  list :  0;
        return out;
    }

    protected static EnumPays create_EnumPays() {
        EnumPays out = EnumPays.values ()[2];
        return out;
    }

    /**
     *
     * Seule methode public de la classe
     */
    public static boolean equals(Info o1, Info o2) {
        return equals_Info( o1 , o2);
    }

    protected static boolean equals_Info(Info o1, Info o2) {
        if ((o1 == null) && (o2 == null)) {
            return true;
        }
        else if (o1 == null)  {
            return false;
        }
        else if (o2 == null)  {
            return false;
        }
        //Nombre de  String :  2;
        //SS  String a;
        if (!equals_Object(o1.getA(), o2.getA())) {
            return false;
        }
        //SS  String aazzzzzz;
        if (!equals_Object(o1.getAazzzzzz(), o2.getAazzzzzz())) {
            return false;
        }
        //Nombre de  native :  1;
        //Sww  Primitive int  b;
        if (!(o1.getB() ==( o2.getB()))) {
            return false;
        }
        //Nombre de  enum :  1;
        //SS4   class atom.tools.very.simple.mapper.p1.EnumPays   pays;
        if (!equals_Object(o1.getPays(), o2.getPays())) {
            return false;
        }
        // Nombre d'objet :  1;
        //S5   class atom.tools.very.simple.mapper.p1.Adress   adress;
        if (! equals_Adress(o1.getAdress(), o2.getAdress())) {
            return false;
        }
        //Nombre de  List<String> :  3;
        //SFF8   interface java.util.List   ls;
        if ( ( o1.getLs()==null) && (o2.getLs()==null)) {
        }
        else if ( o1.getLs()==null)  {
            return false;
        }
        else if ( o2.getLs()==null)  {
            return false;
        }
        else  {
            List<String>  l1=  o1.getLs();
            List<String> l2 =  o2.getLs();
             if (l1.size()!= l2.size())  {
                return false;
            }
            for(int i=0; i< l1.size();i++) {
                if  (! equals_Object( l1.get(i) , l2.get(i)) ) {
                    return false;
                }
            }
        }
        //SFF8   interface java.util.List   ls2;
        if ( ( o1.getLs2()==null) && (o2.getLs2()==null)) {
        }
        else if ( o1.getLs2()==null)  {
            return false;
        }
        else if ( o2.getLs2()==null)  {
            return false;
        }
        else  {
            List<String>  l1=  o1.getLs2();
            List<String> l2 =  o2.getLs2();
             if (l1.size()!= l2.size())  {
                return false;
            }
            for(int i=0; i< l1.size();i++) {
                if  (! equals_Object( l1.get(i) , l2.get(i)) ) {
                    return false;
                }
            }
        }
        //SFF8   interface java.util.List   ls3;
        if ( ( o1.getLs3()==null) && (o2.getLs3()==null)) {
        }
        else if ( o1.getLs3()==null)  {
            return false;
        }
        else if ( o2.getLs3()==null)  {
            return false;
        }
        else  {
            List<String>  l1=  o1.getLs3();
            List<String> l2 =  o2.getLs3();
             if (l1.size()!= l2.size())  {
                return false;
            }
            for(int i=0; i< l1.size();i++) {
                if  (! equals_Object( l1.get(i) , l2.get(i)) ) {
                    return false;
                }
            }
        }
        //Nombre de  List<String> :  3;
        //SFF8   interface java.util.List   voitures;
        if ( ( o1.getVoitures()==null) && (o2.getVoitures()==null)) {
        }
        else if ( o1.getVoitures()==null)  {
            return false;
        }
        else if ( o2.getVoitures()==null)  {
            return false;
        }
        else  {
            List<Voiture>  l1=  o1.getVoitures();
            List<Voiture> l2 =  o2.getVoitures();
             if (l1.size()!= l2.size())  {
                return false;
            }
            for(int i=0; i< l1.size();i++) {
                if  (! equals_Voiture( l1.get(i) , l2.get(i)) ) {
                    return false;
                }
            }
        }
        return true;
    }

    protected static boolean equals_Adress(Adress o1, Adress o2) {
        if ((o1 == null) && (o2 == null)) {
            return true;
        }
        else if (o1 == null)  {
            return false;
        }
        else if (o2 == null)  {
            return false;
        }
        //Nombre de  String :  2;
        //SS  String rue;
        if (!equals_Object(o1.getRue(), o2.getRue())) {
            return false;
        }
        //SS  String ville;
        if (!equals_Object(o1.getVille(), o2.getVille())) {
            return false;
        }
        //Nombre de  native :  1;
        //Sww  Primitive int  departement;
        if (!(o1.getDepartement() ==( o2.getDepartement()))) {
            return false;
        }
        //Nombre de  enum :  0;
        // Nombre d'objet :  0;
        //Nombre de  List<String> :  0;
        //Nombre de  List<String> :  0;
        return true;
    }

    protected static boolean equals_Voiture(Voiture o1, Voiture o2) {
        if ((o1 == null) && (o2 == null)) {
            return true;
        }
        else if (o1 == null)  {
            return false;
        }
        else if (o2 == null)  {
            return false;
        }
        //Nombre de  String :  1;
        //SS  String nom;
        if (!equals_Object(o1.getNom(), o2.getNom())) {
            return false;
        }
        //Nombre de  native :  0;
        //Nombre de  enum :  0;
        // Nombre d'objet :  0;
        //Nombre de  List<String> :  0;
        //Nombre de  List<String> :  0;
        return true;
    }

    protected static boolean equals_EnumPays(EnumPays o1, EnumPays o2) {
        if ((o1 == null) && (o2 == null)) {
            return true;
        }
        else if (o1 == null)  {
            return false;
        }
        else if (o2 == null)  {
            return false;
        }
        if ( (o1 != o2)) {
            return false;
        }
        return true;
    }

    /**
     *
     * methode generique
     */
    protected static boolean equals_Object(Object o1, Object o2) {
        //ZEE   ;
        if ((o1  == null) && (o2  ==null)) {
            return true;
        }
        else if (o1 == null)  {
            return false;
        }
        else if (o2 == null)  {
            return false;
        }
        return o1.equals(o2);
    }
}
